#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö 352 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
"""

# ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ï –ò–ú–ü–û–†–¢–´ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞
from src.services.wordstat_parser import WordstatParser
from src.core.keyword_manager import KeywordManager

def test_all_352_keywords_correct():
    """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö 352 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏"""
    
    print("üß™ –ü–†–ê–í–ò–õ–¨–ù–´–ô –¢–ï–°–¢: –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï 352 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞")
    print("="*70)
    
    # 1. –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = WordstatParser()
    parser.parse_file("data/input/–≥–µ–æ–ª–æ–≥–æ—Ä–∞–∑–≤–µ–¥–∫–∞ wordstat.xlsx")
    
    print(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ WordStat: {len(parser.keywords)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
    
    # 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞—Ä—Å–µ—Ä–µ
    print(f"\nüîç –ü–µ—Ä–≤—ã–µ 3 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞ –≤ –ø–∞—Ä—Å–µ—Ä–µ:")
    for i, keyword_data in enumerate(parser.keywords[:3]):
        keyword = keyword_data.get('keyword', '')
        frequency = keyword_data.get('frequency', 0)
        print(f"   {i+1}. '{keyword}' ‚Üí —á–∞—Å—Ç–æ—Ç–∞ –≤ –ø–∞—Ä—Å–µ—Ä–µ: {frequency}")
    
    # 3. –°–æ–∑–¥–∞–µ–º —á–∏—Å—Ç—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
    manager = KeywordManager()
    
    # 4. –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    print(f"\nüöÄ –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞...")
    
    added_count = 0
    duplicate_count = 0
    error_count = 0
    
    for keyword_data in parser.keywords:
        try:
            keyword_text = keyword_data.get('keyword', '').strip()
            frequency = keyword_data.get('frequency', 0)
            
            if not keyword_text:
                continue
            
            # üîë –ì–õ–ê–í–ù–û–ï: –ø–µ—Ä–µ–¥–∞–µ–º frequency –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            success = manager.add_keyword(
                keyword=keyword_text,
                frequency=frequency,  # ‚Üê –†–µ–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å –∏–∑ WordStat
                cpc=0.0
            )
            
            if success:
                added_count += 1
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                if added_count <= 10:
                    print(f"   ‚úÖ '{keyword_text}' ‚Üí freq: {frequency}")
                elif added_count % 100 == 0:
                    print(f"   üìà –î–æ–±–∞–≤–ª–µ–Ω–æ: {added_count} –∏–∑ {len(parser.keywords)}...")
            else:
                duplicate_count += 1
                
        except Exception as e:
            error_count += 1
            if error_count <= 5:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # 5. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    total_in_manager = len(manager.keywords)
    
    print(f"\nüìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"   üìÅ –í WordStat —Ñ–∞–π–ª–µ: {len(parser.keywords)}")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {added_count}")
    print(f"   üîÑ –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicate_count}")
    print(f"   ‚ùå –û—à–∏–±–æ–∫: {error_count}")
    print(f"   üéØ –í—Å–µ–≥–æ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ: {total_in_manager}")
    
    # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
    print(f"\nüîç –ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ (–ø–µ—Ä–≤—ã–µ 5):")
    for i, kw_obj in enumerate(manager.keywords[:5]):
        text = kw_obj.text
        freq = kw_obj.frequency
        print(f"   {i+1}. '{text}' ‚Üí freq –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ: {freq}")
    
    # 7. –¢–æ–ø-10 –ø–æ —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏
    print(f"\nüèÜ –¢–æ–ø-10 –ø–æ —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏:")
    sorted_keywords = sorted(manager.keywords, key=lambda x: x.frequency, reverse=True)
    
    for i, kw_obj in enumerate(sorted_keywords[:10], 1):
        print(f"   {i:2d}. '{kw_obj.text}' ‚Üí {kw_obj.frequency:,} –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    # 8. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    max_frequency = sorted_keywords[0].frequency if sorted_keywords else 0
    
    print(f"\nüéØ –ü–†–û–í–ï–†–ö–ê –ö–†–ò–¢–ï–†–ò–ï–í:")
    print(f"   ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {total_in_manager} –∏–∑ {len(parser.keywords)}")
    print(f"   ‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å: {max_frequency:,}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
    success_criteria = {
        'all_added': total_in_manager == len(parser.keywords),
        'correct_frequency': max_frequency > 10000,
        'few_errors': error_count < 10
    }
    
    if all(success_criteria.values()):
        print(f"\nüéâ –ü–û–õ–ù–´–ô –£–°–ü–ï–•! üéâ")
        print(f"   üéä –í—Å–µ {total_in_manager} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
        print(f"   üéä –ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        print(f"   üéä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞: {max_frequency:,} –∑–∞–ø—Ä–æ—Å–æ–≤!")
        return True
    else:
        print(f"\n‚ö†Ô∏è –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´:")
        
        if not success_criteria['all_added']:
            print(f"   ‚ùå –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–µ –≤—Å–µ: {total_in_manager} –∏–∑ {len(parser.keywords)}")
            
        if not success_criteria['correct_frequency']:
            print(f"   ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å: {max_frequency} (–æ–∂–∏–¥–∞–ª–∏ >10000)")
            
        if not success_criteria['few_errors']:
            print(f"   ‚ùå –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫: {error_count}")
        
        return False


def debug_imports():
    """–û—Ç–ª–∞–¥–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤"""
    
    print("üêõ –û–¢–õ–ê–î–ö–ê –ò–ú–ü–û–†–¢–û–í:")
    print("="*50)
    
    try:
        from src.services.wordstat_parser import WordstatParser
        print("‚úÖ WordstatParser –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        from src.core.keyword_manager import KeywordManager, Keyword
        print("‚úÖ KeywordManager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print("‚úÖ Keyword –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
        print(f"\nüß™ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤:")
        
        parser = WordstatParser()
        print(f"‚úÖ WordstatParser —Å–æ–∑–¥–∞–Ω: {parser}")
        
        manager = KeywordManager()
        print(f"‚úÖ KeywordManager —Å–æ–∑–¥–∞–Ω: {manager}")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è Keyword
        kw = Keyword(text="—Ç–µ—Å—Ç", frequency=1000, cpc=5.0)
        print(f"‚úÖ Keyword —Å–æ–∑–¥–∞–Ω: {kw}")
        print(f"   –¢–µ–∫—Å—Ç: '{kw.text}'")
        print(f"   –ß–∞—Å—Ç–æ—Ç–∞: {kw.frequency}")
        print(f"   CPC: {kw.cpc}")
        
        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –º–µ–Ω–µ–¥–∂–µ—Ä
        success = manager.add_keyword(keyword="—Ç–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞", frequency=2000, cpc=10.0)
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä: {success}")
        
        if manager.keywords:
            added_kw = manager.keywords[0]
            print(f"   –î–æ–±–∞–≤–ª–µ–Ω–æ: '{added_kw.text}' (freq: {added_kw.frequency})")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


if __name__ == "__main__":
    print("üîß –ó–∞–ø—É—Å–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...")
    print("="*70)
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
    if debug_imports():
        print("\n" + "="*70)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
        success = test_all_352_keywords_correct()
        
        if success:
            print(f"\nüéäüéäüéä –í–°–Å –ò–î–ï–ê–õ–¨–ù–û! üéäüéäüéä")
            print(f"–í—Å–µ 352 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å—é!")
        else:
            print(f"\nüîß –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –Ω–æ —Ç–µ—Å—Ç –ø–æ–∫–∞–∑–∞–ª –¥–µ—Ç–∞–ª–∏")
    else:
        print(f"\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞.")