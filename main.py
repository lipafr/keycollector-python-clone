#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
from flask import Flask, render_template_string, request, jsonify

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –º–æ–¥—É–ª—å
from core.keyword_manager import KeywordManager

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
app = Flask(__name__)
keyword_manager = KeywordManager()

# HTML —à–∞–±–ª–æ–Ω —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>KeyCollector Python Clone</title>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            margin: 20px; 
            background: #f5f5f5; 
        }
        .container { 
            background: white; 
            padding: 30px; 
            border-radius: 10px; 
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            max-width: 1200px;
            margin: 0 auto;
        }
        h1 { color: #333; text-align: center; }
        .section { margin: 20px 0; padding: 20px; border: 1px solid #ddd; border-radius: 5px; }
        .form-group { margin: 10px 0; }
        input, textarea, button { padding: 10px; margin: 5px; border: 1px solid #ddd; border-radius: 4px; }
        button { background: #007bff; color: white; cursor: pointer; }
        button:hover { background: #0056b3; }
        .keyword-list { max-height: 300px; overflow-y: auto; border: 1px solid #ddd; padding: 10px; }
        .keyword-item { padding: 5px; border-bottom: 1px solid #eee; }
        .stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; }
        .stat-card { background: #f8f9fa; padding: 15px; border-radius: 5px; text-align: center; }
        .stat-number { font-size: 24px; font-weight: bold; color: #007bff; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üîë KeyCollector Python Clone</h1>
        
        <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
        <div class="section">
            <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
            <div class="stats" id="stats">
                <div class="stat-card">
                    <div class="stat-number" id="total-keywords">{{ stats.get('total', 0) }}</div>
                    <div>–í—Å–µ–≥–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="avg-words">{{ "%.1f"|format(stats.get('avg_word_count', 0)) }}</div>
                    <div>–°—Ä–µ–¥–Ω–µ–µ —Å–ª–æ–≤ –≤ —Ñ—Ä–∞–∑–µ</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="categories">{{ stats.get('categories', 0) }}</div>
                    <div>–ö–∞—Ç–µ–≥–æ—Ä–∏–π</div>
                </div>
            </div>
        </div>

        <!-- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ -->
        <div class="section">
            <h3>‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</h3>
            <div class="form-group">
                <textarea id="keywords-input" placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)" rows="5" style="width: 100%;"></textarea>
            </div>
            <button onclick="addKeywords()">–î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</button>
            <button onclick="clearAll()">–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ</button>
        </div>

        <!-- –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è -->
        <div class="section">
            <h3>üîç –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è</h3>
            <div class="form-group">
                <input type="text" id="search-input" placeholder="–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º" style="width: 300px;">
                <button onclick="searchKeywords()">–ù–∞–π—Ç–∏</button>
                <button onclick="showAll()">–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ</button>
            </div>
        </div>

        <!-- –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ -->
        <div class="section">
            <h3>üìù –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ ({{ keywords|length }})</h3>
            <div class="keyword-list" id="keyword-list">
                {% for keyword in keywords %}
                <div class="keyword-item">
                    <strong>{{ keyword.text }}</strong> 
                    <small>(—Å–ª–æ–≤: {{ keyword.word_count() }}, –¥–æ–±–∞–≤–ª–µ–Ω–æ: {{ keyword.added_date.strftime('%H:%M') }})</small>
                </div>
                {% endfor %}
            </div>
        </div>

    </div>

    <script>
        // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        function addKeywords() {
            const input = document.getElementById('keywords-input');
            const keywords = input.value.trim().split('\\n').filter(k => k.trim());
            
            if (keywords.length === 0) {
                alert('–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞!');
                return;
            }

            fetch('/api/keywords', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({keywords: keywords})
            })
            .then(response => response.json())
            .then(data => {
                alert(`–î–æ–±–∞–≤–ª–µ–Ω–æ: ${data.added}, –î—É–±–ª–∏–∫–∞—Ç–æ–≤: ${data.duplicates}`);
                location.reload();
            });
        }

        // –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞
        function searchKeywords() {
            const query = document.getElementById('search-input').value;
            
            fetch(`/api/search?q=${encodeURIComponent(query)}`)
            .then(response => response.json())
            .then(data => {
                displayKeywords(data.keywords);
            });
        }

        // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        function showAll() {
            location.reload();
        }

        // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        function clearAll() {
            if (confirm('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞?')) {
                fetch('/api/clear', {method: 'DELETE'})
                .then(() => location.reload());
            }
        }

        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        function displayKeywords(keywords) {
            const container = document.getElementById('keyword-list');
            container.innerHTML = '';
            
            keywords.forEach(kw => {
                const div = document.createElement('div');
                div.className = 'keyword-item';
                div.innerHTML = `<strong>${kw.text}</strong> <small>(—Å–ª–æ–≤: ${kw.word_count})</small>`;
                container.appendChild(div);
            });
        }
    </script>
</body>
</html>
"""

@app.route('/')
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏"""
    stats = keyword_manager.get_statistics()
    return render_template_string(HTML_TEMPLATE, 
                                keywords=keyword_manager.keywords, 
                                stats=stats)

@app.route('/api/keywords', methods=['POST'])
def add_keywords():
    """API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    data = request.get_json()
    keywords = data.get('keywords', [])
    
    stats = keyword_manager.add_keywords_bulk(keywords)
    return jsonify(stats)

@app.route('/api/search')
def search_keywords():
    """API –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    query = request.args.get('q', '')
    found_keywords = keyword_manager.find_keywords(query)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è JSON
    keywords_data = []
    for kw in found_keywords:
        keywords_data.append({
            'text': kw.text,
            'word_count': kw.word_count(),
            'frequency': kw.frequency,
            'category': kw.category
        })
    
    return jsonify({'keywords': keywords_data})

@app.route('/api/clear', methods=['DELETE'])
def clear_keywords():
    """API –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    keyword_manager.clear_all()
    return jsonify({'status': 'cleared'})

@app.route('/api/stats')
def get_stats():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    return jsonify(keyword_manager.get_statistics())

@app.route('/api/export')
def export_keywords():
    """API –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    df = keyword_manager.to_dataframe()
    return jsonify({
        'keywords': df.to_dict('records'),
        'total': len(df)
    })

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ KeyCollector Python Clone...")
    print("üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:", os.getcwd())
    print("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:5000")
    print("üìä API endpoints:")
    print("   POST /api/keywords - –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")
    print("   GET  /api/search - –ø–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤") 
    print("   GET  /api/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    print("   GET  /api/export - —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    app.run(host='0.0.0.0', port=5000, debug=True)