#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
from flask import Flask, render_template_string, request, jsonify

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –º–æ–¥—É–ª—å
from core.keyword_manager import KeywordManager
from core.keyword_manager import KeywordManager
from core.data_parser import DataParser

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
app = Flask(__name__)
keyword_manager = KeywordManager()

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
app = Flask(__name__)
keyword_manager = KeywordManager()
data_parser = DataParser()

# HTML —à–∞–±–ª–æ–Ω —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>KeyCollector Python Clone</title>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            margin: 20px; 
            background: #f5f5f5; 
        }
        .container { 
            background: white; 
            padding: 30px; 
            border-radius: 10px; 
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            max-width: 1200px;
            margin: 0 auto;
        }
        h1 { color: #333; text-align: center; }
        .section { margin: 20px 0; padding: 20px; border: 1px solid #ddd; border-radius: 5px; }
        .form-group { margin: 10px 0; }
        input, textarea, button { padding: 10px; margin: 5px; border: 1px solid #ddd; border-radius: 4px; }
        button { background: #007bff; color: white; cursor: pointer; }
        button:hover { background: #0056b3; }
        .keyword-list { max-height: 300px; overflow-y: auto; border: 1px solid #ddd; padding: 10px; }
        .keyword-item { padding: 5px; border-bottom: 1px solid #eee; }
        .stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; }
        .stat-card { background: #f8f9fa; padding: 15px; border-radius: 5px; text-align: center; }
        .stat-number { font-size: 24px; font-weight: bold; color: #007bff; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üîë KeyCollector Python Clone</h1>
        
        <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
        <div class="section">
            <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
            <div class="stats" id="stats">
                <div class="stat-card">
                    <div class="stat-number" id="total-keywords">{{ stats.get('total', 0) }}</div>
                    <div>–í—Å–µ–≥–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="avg-words">{{ "%.1f"|format(stats.get('avg_word_count', 0)) }}</div>
                    <div>–°—Ä–µ–¥–Ω–µ–µ —Å–ª–æ–≤ –≤ —Ñ—Ä–∞–∑–µ</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="categories">{{ stats.get('categories', 0) }}</div>
                    <div>–ö–∞—Ç–µ–≥–æ—Ä–∏–π</div>
                </div>
            </div>
        </div>

        <!-- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ -->
        <div class="section">
            <h3>‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</h3>
            <div class="form-group">
                <textarea id="keywords-input" placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)" rows="5" style="width: 100%;"></textarea>
            </div>
            <button onclick="addKeywords()">–î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</button>
            <button onclick="clearAll()">–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ</button>
        </div>

        <!-- –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö -->
        <div class="section">
            <h3>üì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</h3>
            
            <!-- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ -->
            <div class="form-group">
                <label>üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ (CSV, Excel, TXT, JSON):</label>
                <input type="file" id="file-input" accept=".csv,.txt,.xlsx,.xls,.json" style="margin: 10px 0;">
                <br>
                <button onclick="uploadFile()">–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª</button>
                <div id="upload-status" style="margin-top: 10px; font-style: italic;"></div>
            </div>
            
            <hr>
            
            <!-- –ò–º–ø–æ—Ä—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ -->
            <div class="form-group">
                <label>üìù –ò–º–ø–æ—Ä—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ (—Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏):</label>
                <textarea id="import-text" placeholder="–í—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ (–∫–∞–∂–¥–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)" rows="4" style="width: 100%;"></textarea>
                <br>
                <label>–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å:</label>
                <select id="delimiter">
                    <option value="\n">–ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞</option>
                    <option value=",">–ó–∞–ø—è—Ç–∞—è</option>
                    <option value=";">–¢–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π</option>
                    <option value="\t">–¢–∞–±—É–ª—è—Ü–∏—è</option>
                </select>
                <button onclick="importFromText()">–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ —Ç–µ–∫—Å—Ç–∞</button>
            </div>
            
            <hr>
            
            <!-- –ò–º–ø–æ—Ä—Ç —Å URL -->
            <div class="form-group">
                <label>üåê –ò–º–ø–æ—Ä—Ç —Å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã:</label>
                <input type="text" id="url-input" placeholder="https://example.com" style="width: 300px;">
                <button onclick="importFromURL()">–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å URL</button>
            </div>
            
            <div class="form-group">
                <small>
                    <strong>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</strong>
                    <ul>
                        <li><strong>CSV</strong> - —Ñ–∞–π–ª—ã —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ (–∑–∞–ø—è—Ç–∞—è, —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π)</li>
                        <li><strong>Excel</strong> - .xlsx –∏ .xls —Ñ–∞–π–ª—ã</li>
                        <li><strong>TXT</strong> - —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (–∫–∞–∂–¥–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)</li>
                        <li><strong>JSON</strong> - –º–∞—Å—Å–∏–≤—ã –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ</li>
                    </ul>
                </small>
            </div>
        </div>

        <!-- –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ -->
        <div class="section">
            <h3>üìù –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ ({{ keywords|length }})</h3>
            <div class="keyword-list" id="keyword-list">
                {% for keyword in keywords %}
                <div class="keyword-item">
                    <strong>{{ keyword.text }}</strong> 
                    <small>(—Å–ª–æ–≤: {{ keyword.word_count() }}, –¥–æ–±–∞–≤–ª–µ–Ω–æ: {{ keyword.added_date.strftime('%H:%M') }})</small>
                </div>
                {% endfor %}
            </div>
        </div>

    </div>

    <script>
        // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        function addKeywords() {
            const input = document.getElementById('keywords-input');
            const keywords = input.value.trim().split('\\n').filter(k => k.trim());
            
            if (keywords.length === 0) {
                alert('–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞!');
                return;
            }

            fetch('/api/keywords', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({keywords: keywords})
            })
            .then(response => response.json())
            .then(data => {
                alert(`–î–æ–±–∞–≤–ª–µ–Ω–æ: ${data.added}, –î—É–±–ª–∏–∫–∞—Ç–æ–≤: ${data.duplicates}`);
                location.reload();
            });
        }

        // –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞
        function searchKeywords() {
            const query = document.getElementById('search-input').value;
            
            fetch(`/api/search?q=${encodeURIComponent(query)}`)
            .then(response => response.json())
            .then(data => {
                displayKeywords(data.keywords);
            });
        }

        // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        function showAll() {
            location.reload();
        }

        // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        function clearAll() {
            if (confirm('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞?')) {
                fetch('/api/clear', {method: 'DELETE'})
                .then(() => location.reload());
            }
        }

        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        function displayKeywords(keywords) {
            const container = document.getElementById('keyword-list');
            container.innerHTML = '';
            
            keywords.forEach(kw => {
                const div = document.createElement('div');
                div.className = 'keyword-item';
                div.innerHTML = `<strong>${kw.text}</strong> <small>(—Å–ª–æ–≤: ${kw.word_count})</small>`;
                container.appendChild(div);
            });
        }

        // –§—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        function importFromText() {
            const text = document.getElementById('import-text').value.trim();
            const delimiter = document.getElementById('delimiter').value.replace('\\n', '\n').replace('\\t', '\t');
            
            if (!text) {
                alert('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞!');
                return;
            }

            fetch('/api/import/text', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({
                    text: text,
                    delimiter: delimiter
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.errors && data.errors.length > 0) {
                    alert('–û—à–∏–±–∫–∏: ' + data.errors.join(', '));
                } else {
                    alert(`–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${data.imported} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤\\n–î—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${data.duplicates}`);
                    location.reload();
                }
            })
            .catch(error => {
                alert('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ' + error);
            });
        }

        // –§—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ —Å URL
        function importFromURL() {
            const url = document.getElementById('url-input').value.trim();
            
            if (!url) {
                alert('–í–≤–µ–¥–∏—Ç–µ URL!');
                return;
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            document.getElementById('url-input').disabled = true;
            
            fetch('/api/import/url', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({url: url})
            })
            .then(response => response.json())
            .then(data => {
                document.getElementById('url-input').disabled = false;
                
                if (data.errors && data.errors.length > 0) {
                    alert('–û—à–∏–±–∫–∏: ' + data.errors.join(', '));
                } else {
                    alert(`–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å ${url}:\\n${data.imported} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤\\n–î—É–±–ª–∏–∫–∞—Ç–æ–≤: ${data.duplicates}`);
                    location.reload();
                }
            })
            .catch(error => {
                document.getElementById('url-input').disabled = false;
                alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + error);
            });
        }

        // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        function uploadFile() {
            const fileInput = document.getElementById('file-input');
            const statusDiv = document.getElementById('upload-status');
            
            if (!fileInput.files || fileInput.files.length === 0) {
                alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏!');
                return;
            }
            
            const file = fileInput.files[0];
            const formData = new FormData();
            formData.append('file', file);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
            statusDiv.innerHTML = '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞...';
            statusDiv.style.color = '#007bff';
            
            fetch('/api/import/file', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    statusDiv.innerHTML = `‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${data.imported} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (–¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${data.duplicates})`;
                    statusDiv.style.color = '#28a745';
                    
                    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ —Ñ–∞–π–ª–∞
                    fileInput.value = '';
                    
                    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                    setTimeout(() => location.reload(), 2000);
                } else {
                    statusDiv.innerHTML = `‚ùå –û—à–∏–±–∫–∏: ${data.errors.join(', ')}`;
                    statusDiv.style.color = '#dc3545';
                }
            })
            .catch(error => {
                statusDiv.innerHTML = `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error}`;
                statusDiv.style.color = '#dc3545';
            });
        }
    </script>
</body>
</html>
"""

@app.route('/')
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏"""
    stats = keyword_manager.get_statistics()
    return render_template_string(HTML_TEMPLATE, 
                                keywords=keyword_manager.keywords, 
                                stats=stats)

@app.route('/api/keywords', methods=['POST'])
def add_keywords():
    """API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    data = request.get_json()
    keywords = data.get('keywords', [])
    
    stats = keyword_manager.add_keywords_bulk(keywords)
    return jsonify(stats)

@app.route('/api/search')
def search_keywords():
    """API –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    query = request.args.get('q', '')
    found_keywords = keyword_manager.find_keywords(query)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è JSON
    keywords_data = []
    for kw in found_keywords:
        keywords_data.append({
            'text': kw.text,
            'word_count': kw.word_count(),
            'frequency': kw.frequency,
            'category': kw.category
        })
    
    return jsonify({'keywords': keywords_data})

@app.route('/api/clear', methods=['DELETE'])
def clear_keywords():
    """API –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    keyword_manager.clear_all()
    return jsonify({'status': 'cleared'})

@app.route('/api/stats')
def get_stats():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    return jsonify(keyword_manager.get_statistics())

@app.route('/api/export')
def export_keywords():
    """API –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    df = keyword_manager.to_dataframe()
    return jsonify({
        'keywords': df.to_dict('records'),
        'total': len(df)
    })

@app.route('/api/import/text', methods=['POST'])
def import_from_text():
    """API –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    try:
        data = request.get_json()
        text = data.get('text', '')
        delimiter = data.get('delimiter', '\n')
        
        # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç
        parse_result = data_parser.parse_text(text, delimiter)
        
        if parse_result.errors:
            return jsonify({
                'success': False,
                'errors': parse_result.errors
            }), 400
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        import_stats = keyword_manager.add_keywords_bulk(parse_result.keywords)
        
        return jsonify({
            'success': True,
            'imported': import_stats['added'],
            'duplicates': import_stats['duplicates'],
            'total_parsed': parse_result.total_processed,
            'metadata': parse_result.metadata
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'errors': [f'–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}']
        }), 500

@app.route('/api/import/url', methods=['POST'])
def import_from_url():
    """API –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    try:
        data = request.get_json()
        url = data.get('url', '')
        
        if not url:
            return jsonify({
                'success': False,
                'errors': ['URL –Ω–µ —É–∫–∞–∑–∞–Ω']
            }), 400
        
        # –ü–∞—Ä—Å–∏–º URL
        parse_result = data_parser.parse_url_content(url)
        
        if parse_result.errors:
            return jsonify({
                'success': False,
                'errors': parse_result.errors
            }), 400
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
        limited_keywords = parse_result.keywords[:100]  # –ú–∞–∫—Å–∏–º—É–º 100 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —Å –æ–¥–Ω–æ–≥–æ URL
        import_stats = keyword_manager.add_keywords_bulk(limited_keywords)
        
        return jsonify({
            'success': True,
            'imported': import_stats['added'],
            'duplicates': import_stats['duplicates'],
            'total_parsed': len(limited_keywords),
            'url': url,
            'metadata': parse_result.metadata
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'errors': [f'–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å URL: {str(e)}']
        }), 500

@app.route('/api/parser/formats')
def get_supported_formats():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
    return jsonify({
        'formats': data_parser.get_supported_formats(),
        'description': {
            '.csv': '–§–∞–π–ª—ã —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ (–∑–∞–ø—è—Ç–∞—è, —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π)',
            '.txt': '–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã',
            '.xlsx': 'Excel —Ñ–∞–π–ª—ã (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)',
            '.xls': 'Excel —Ñ–∞–π–ª—ã (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)', 
            '.json': 'JSON —Ñ–∞–π–ª—ã —Å –º–∞—Å—Å–∏–≤–∞–º–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤'
        }
    })

@app.route('/api/import/file', methods=['POST'])
def import_from_file():
    """API –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
        if 'file' not in request.files:
            return jsonify({
                'success': False,
                'errors': ['–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω']
            }), 400
        
        file = request.files['file']
        
        if file.filename == '':
            return jsonify({
                'success': False,
                'errors': ['–ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ']
            }), 400
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤—Ä–µ–º–µ–Ω–Ω–æ
        import tempfile
        import os
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        temp_dir = '/app/data/temp'
        os.makedirs(temp_dir, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        temp_path = os.path.join(temp_dir, file.filename)
        file.save(temp_path)
        
        try:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∏ –ø–∞—Ä—Å–∏–º
            parse_result = data_parser.auto_detect_format(temp_path)
            
            if parse_result.errors:
                return jsonify({
                    'success': False,
                    'errors': parse_result.errors
                }), 400
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            import_stats = keyword_manager.add_keywords_bulk(parse_result.keywords)
            
            return jsonify({
                'success': True,
                'imported': import_stats['added'],
                'duplicates': import_stats['duplicates'],
                'errors_count': import_stats['errors'],
                'total_parsed': parse_result.total_processed,
                'file_name': file.filename,
                'source_type': parse_result.source_type,
                'metadata': parse_result.metadata
            })
            
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.remove(temp_path)
            except:
                pass
        
    except Exception as e:
        return jsonify({
            'success': False,
            'errors': [f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}']
        }), 500

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ KeyCollector Python Clone...")
    print("üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:", os.getcwd())
    print("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:5000")
    print("üìä API endpoints:")
    print("   POST /api/keywords - –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")
    print("   GET  /api/search - –ø–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤") 
    print("   GET  /api/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    print("   GET  /api/export - —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    app.run(host='0.0.0.0', port=5000, debug=True)