#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–†–∞–±–æ—á–∏–π —Ç–µ—Å—Ç —Å DataParser –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ WordStat —Ñ–∞–π–ª–∞
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫–∏ –≤ –ø—É—Ç—å
sys.path.insert(0, 'src/core')

def test_wordstat_with_dataparser():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ WordStat —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ DataParser"""
    
    print("üß™ –¢–ï–°–¢: DataParser + WordStat —Ñ–∞–π–ª")
    print("="*50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã
        from data_parser import DataParser
        from keyword_manager import KeywordManager
        
        print("‚úÖ –ò–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã!")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
        parser = DataParser()
        manager = KeywordManager()
        
        print("‚úÖ –û–±—ä–µ–∫—Ç—ã —Å–æ–∑–¥–∞–Ω—ã!")
        
        # –ü–∞—Ä—Å–∏–º WordStat —Ñ–∞–π–ª –∫–∞–∫ Excel
        print(f"\nüìÅ –ü–∞—Ä—Å–∏–º WordStat Excel —Ñ–∞–π–ª...")
        
        result = parser.parse_excel(
            file_path="data/input/–≥–µ–æ–ª–æ–≥–æ—Ä–∞–∑–≤–µ–¥–∫–∞ wordstat.xlsx",
            sheet_name=0,      # –ü–µ—Ä–≤—ã–π –ª–∏—Å—Ç
            keyword_column=0,  # –ü–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ (–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞)
            has_header=True    # –ï—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏
        )
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:")
        print(f"   - –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(result.keywords)}")
        print(f"   - –û—à–∏–±–æ–∫: {len(result.errors)}")
        print(f"   - –ò—Å—Ç–æ—á–Ω–∏–∫: {result.source_type}")
        
        if result.errors:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∏:")
            for error in result.errors:
                print(f"   - {error}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        print(f"\nüîç –ü–µ—Ä–≤—ã–µ 5 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ –ø–∞—Ä—Å–µ—Ä–∞:")
        for i, keyword in enumerate(result.keywords[:5], 1):
            print(f"   {i}. '{keyword}'")
        
        if not result.keywords:
            print("‚ùå –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            print(f"üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {result.metadata}")
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä
        print(f"\nüöÄ –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä...")
        
        added = 0
        for keyword in result.keywords:
            if keyword.strip():  # –¢–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ
                success = manager.add_keyword(
                    keyword=keyword,
                    frequency=0,  # DataParser –Ω–µ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å
                    cpc=0.0
                )
                if success:
                    added += 1
        
        total = len(manager.keywords)
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"   üìÅ –ò–∑–≤–ª–µ—á–µ–Ω–æ –ø–∞—Ä—Å–µ—Ä–æ–º: {len(result.keywords)}")
        print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä: {added}")
        print(f"   üéØ –í—Å–µ–≥–æ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ: {total}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
        print(f"\nüîç –ü–µ—Ä–≤—ã–µ 5 –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ:")
        for i, kw in enumerate(manager.keywords[:5]):
            print(f"   {i+1}. '{kw.text}' (freq: {kw.frequency})")
        
        # –û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        if total >= 300:  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–∫–æ–ª–æ 352
            print(f"\nüéâ –£–°–ü–ï–•! –î–æ–±–∞–≤–ª–µ–Ω–æ {total} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤!")
            return True
        elif total >= 100:
            print(f"\n‚úÖ –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•! –î–æ–±–∞–≤–ª–µ–Ω–æ {total} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
            print("‚ö†Ô∏è –ù–æ —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω–∞ (DataParser –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç)")
            return True
        else:
            print(f"\n‚ö†Ô∏è –ú–ê–õ–û –î–ê–ù–ù–´–•! –¢–æ–ª—å–∫–æ {total} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_excel_structure():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É Excel —Ñ–∞–π–ª–∞"""
    
    print("\n" + "="*50)
    print("üîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ EXCEL –§–ê–ô–õ–ê")
    print("="*50)
    
    try:
        import pandas as pd
        
        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        df = pd.read_excel("data/input/–≥–µ–æ–ª–æ–≥–æ—Ä–∞–∑–≤–µ–¥–∫–∞ wordstat.xlsx")
        
        print(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞:")
        print(f"   - –†–∞–∑–º–µ—Ä: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")
        print(f"   - –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫
        print(f"\nüìã –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫:")
        for i in range(min(5, len(df))):
            row = df.iloc[i]
            print(f"   –°—Ç—Ä–æ–∫–∞ {i+1}:")
            for j, (col_name, value) in enumerate(row.items()):
                print(f"     {j}: {col_name} = '{value}'")
            print()
        
        # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å—é
        print(f"üîç –ü–æ–∏—Å–∫ –∫–æ–ª–æ–Ω–∫–∏ —Å —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å—é:")
        for col in df.columns:
            if any(word in str(col).lower() for word in ['—á–∞—Å—Ç–æ—Ç', '–∑–∞–ø—Ä–æ—Å', 'frequency', 'count']):
                print(f"   ‚úÖ –í–æ–∑–º–æ–∂–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏: '{col}'")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π
                values = df[col].head()
                print(f"      –ü–µ—Ä–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {list(values)}")
        
        return df
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Excel: {e}")
        return None


def create_custom_wordstat_parser(df):
    """–°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è WordStat –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
    
    print("\n" + "="*50)
    print("üõ†Ô∏è –°–û–ó–î–ê–ù–ò–ï –ö–ê–°–¢–û–ú–ù–û–ì–û WORDSTAT –ü–ê–†–°–ï–†–ê")
    print("="*50)
    
    try:
        from keyword_manager import KeywordManager
        
        manager = KeywordManager()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏
        keyword_col = None
        frequency_col = None
        
        # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (–æ–±—ã—á–Ω–æ –ø–µ—Ä–≤–∞—è)
        for i, col in enumerate(df.columns):
            if i == 0 or any(word in str(col).lower() for word in ['–∫–ª—é—á', '—Å–ª–æ–≤', '—Ñ—Ä–∞–∑', '–∑–∞–ø—Ä–æ—Å']):
                keyword_col = col
                print(f"‚úÖ –ö–æ–ª–æ–Ω–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: '{col}'")
                break
        
        # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏
        for col in df.columns:
            if any(word in str(col).lower() for word in ['—á–∞—Å—Ç–æ—Ç', '–∑–∞–ø—Ä–æ—Å', 'frequency', 'count']):
                frequency_col = col
                print(f"‚úÖ –ö–æ–ª–æ–Ω–∫–∞ —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏: '{col}'")
                break
        
        if not keyword_col:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
            return False
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        print(f"\nüöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        
        added = 0
        for index, row in df.iterrows():
            try:
                keyword = str(row[keyword_col]).strip()
                frequency = 0
                
                if frequency_col and pd.notna(row[frequency_col]):
                    try:
                        frequency = int(float(str(row[frequency_col]).replace(',', '').replace(' ', '')))
                    except:
                        frequency = 0
                
                if keyword and keyword.lower() not in ['nan', 'none', '']:
                    success = manager.add_keyword(
                        keyword=keyword,
                        frequency=frequency,
                        cpc=0.0
                    )
                    
                    if success:
                        added += 1
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                        if added <= 10:
                            print(f"   ‚úÖ '{keyword}' ‚Üí {frequency}")
                
            except Exception as e:
                if added <= 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –æ—à–∏–±–∫–∏
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {index}: {e}")
        
        total = len(manager.keywords)
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ö–ê–°–¢–û–ú–ù–û–ì–û –ü–ê–†–°–ï–†–ê:")
        print(f"   üìÅ –°—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: {len(df)}")
        print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {added}")
        print(f"   üéØ –í –º–µ–Ω–µ–¥–∂–µ—Ä–µ: {total}")
        
        # –¢–æ–ø –ø–æ —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏
        if total > 0:
            sorted_kw = sorted(manager.keywords, key=lambda x: x.frequency, reverse=True)
            max_freq = sorted_kw[0].frequency
            
            print(f"\nüèÜ –¢–æ–ø-5 –ø–æ —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏:")
            for i, kw in enumerate(sorted_kw[:5], 1):
                print(f"   {i}. '{kw.text}' ‚Üí {kw.frequency:,}")
            
            if total >= 350 and max_freq > 10000:
                print(f"\nüéâ –ö–ê–°–¢–û–ú–ù–´–ô –ü–ê–†–°–ï–† - –ü–û–õ–ù–´–ô –£–°–ü–ï–•!")
                print(f"   ‚úÖ –í—Å–µ {total} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —Å —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å—é!")
                return True
            elif total >= 300:
                print(f"\n‚úÖ –ö–ê–°–¢–û–ú–ù–´–ô –ü–ê–†–°–ï–† - –£–°–ü–ï–•!")
                print(f"   ‚úÖ {total} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
                return True
        
        return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        return False


if __name__ == "__main__":
    print("üîß –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ WordStat...")
    print("="*60)
    
    # –¢–µ—Å—Ç 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π DataParser
    success1 = test_wordstat_with_dataparser()
    
    # –¢–µ—Å—Ç 2: –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞
    df = test_excel_structure()
    
    # –¢–µ—Å—Ç 3: –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
    success3 = False
    if df is not None:
        success3 = create_custom_wordstat_parser(df)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\n" + "="*60)
    print(f"üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"   üîß DataParser: {'‚úÖ' if success1 else '‚ùå'}")
    print(f"   üîç –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {'‚úÖ' if df is not None else '‚ùå'}")
    print(f"   üõ†Ô∏è –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø–∞—Ä—Å–µ—Ä: {'‚úÖ' if success3 else '‚ùå'}")
    
    if success3:
        print(f"\nüéä –ü–û–ë–ï–î–ê! –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å –∑–∞–¥–∞—á–µ–π!")
    elif success1:
        print(f"\n‚úÖ DataParser —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –±–µ–∑ —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏")
    else:
        print(f"\nüîß –ù—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")